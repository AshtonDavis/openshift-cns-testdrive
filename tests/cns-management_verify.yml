---

  - hosts: localhost

    tasks:

      - include_vars: /opt/lab/environment.yml
        tags: always

      - set_fact:
          cns_namespace: "{{ CNS_NAMESPACE }}"
          cns_storageclass: "{{ CNS_STORAGECLASS }}"
          new_cns_nodes_internal_fqdn:
            - "{{NODE4_INTERNAL_FQDN}}"
            - "{{NODE5_INTERNAL_FQDN}}"
            - "{{NODE6_INTERNAL_FQDN}}"
          heketi_resturl: "http://heketi-{{CNS_NAMESPACE}}.{{OCP_ROUTING_SUFFIX}}"
          heketi_admin_pw: "{{ HEKETI_ADMIN_PW }}"
          cns_storageclass2: "{{CNS_STORAGECLASS2}}"
          ocp_routing_suffix: "{{OCP_ROUTING_SUFFIX}}"
          node_brick_device: "{{ NODE_BRICK_DEVICE }}"
          node_brick_device2: "{{ NODE_BRICK_DEVICE2 }}"
          node4_internal_fqdn: " {{ NODE4_INTERNAL_FQDN }}"
        tags: always

      - name: login as fancyuser1
        shell: oc login -u fancyuser1 -p openshift
        changed_when: false

      - name: ensure fancyuser1 can log in to project 'my-database-app'
        shell: oc project my-database-app
        changed_when: false

      - name: check pvc called 'postgres' exists
        shell: oc get pvc/postgresql -o json
        register: get_postgresql_pvc
        changed_when: false

      - set_fact:
          postgresql_pvc: "{{ get_postgresql_pvc.stdout|from_json }}"

      - name: ensure pvc is bound
        fail:
          msg: pvc is not bound
        when: postgresql_pvc.status.phase != "Bound"

      - name: ensure pvc is issued against CNS
        fail:
          msg: pvc is not satisfied from StorageClass {{ cns_storageclass }}
        when: postgresql_pvc.metadata.annotations.["volume.beta.kubernetes.io/storage-class"] != cns_storageclass

      - shell: login -u system:admin -n my-database-app
        changed_when: false

      - name: check pv is exists
        shell: oc get pv/{{ postgresql_pvc.spec.volumeName }} -o json
        register: get_postgresql_pv
        changed_when: false

      - set_fact:
          postgresql_pv: "{{ get_postgresql_pv.stdout|from_json }}"

      - name: check pv is provided by CNS
        fail:
          msg: pv is not provided by {{ cns_storageclass }}
        when: postgresql_pv.metadata.annotations.["volume.beta.kubernetes.io/storage-class"] != cns_storageclass

      - name: get storage class
        shell: oc get storageclass/cns-gold -o json
        register: get_storageclass1
        changed_when: false

      - set_fact:
          storageclass1: "{{ get_storageclass1.stdout|from_json }}"

      - name: get CNS cluster id of storageclass
        set_fact:
          clusterid1: "storageclass1.parameters.clusterid"

      - name: get nodes from heketi using CNS cluster id
        shell: heketi-cli --user=admin --secret {{ heketi_admin_pw }} --server {{ heketi_resturl }} cluster info {{ clusterid1 }} --json
        register: get_cluster1_nodes
        changed_when: false

      - set_fact:
          cluster1_nodes: "{{ get_cluster1_nodes.stdout|from_json }}"

      - name: get id of first node of CNS cluster
        set_fact:
          cluster1_node1_id: "{{ cluster1_nodes.nodes|first }}"

      - name: get details of first node of CNS cluster
        shell: heketi-cli --user=admin --secret {{ heketi_admin_pw }} --server {{ heketi_resturl }} node info {{ cluster1_node1_id }} --json
        register: get_cluster1_node1
        changed_when: false

      - set_fact:
          cluster1_node1: "{{ get_cluster1_node1.stdout|from_json }}"

      - set_fact:
          cluster1_node1_hostip: "{{ cluster1_node1.hostnames.storage|first }}"

      - name: get pod name of first node of cns cluster
        shell: oc get pods -o wide -n container-native-storage -o jsonpath='{$.items[?(@.status.hostIP=="{{ cluster1_node1_hostip }}")].metadata.name}'
        register: get_cluster1_node1_pod
        changed_when: false

      - set_fact:
          cluster1_node1_pod: "{{ get_cluster1_node1_pod.stdout|from_json }}"

      - set_fact:
          pv_gluster_vol_name: "{{ postgresql_pv.spec.glusterfs.path }}"

      - name: switch to cns namespace
        shell: oc project {{ cns_namespace }}
        changed_when: false

      - name: check gluster volume of pv
        shell: oc rsh {{ cluster1_node1_pod }} gluster vol info {{ pv_gluster_vol_name }}
        changed_when: false

      - name: log back in as fancyuser1 to my-database-app
        shell: oc login -u fancyuser1 -p openshift -n my-database-app
        changed_when: false

      - name: check health of postgres-db deployment
        shell: oc get rc -o jsonpath='{$.items[?(@.spec.selector.name=="postgresql")].status.readyReplicas}'
        register: pgsql_db_rc_check
        failed_when: pgsql_db_rc_check != "1"
        changed_when: false

      - name: check health of rails-app deployment
        shell: oc get rc -o jsonpath='{$.items[?(@.spec.selector.name=="rails-pgsql-persistent")].status.readyReplicas}'
        register: rails_app_rc_check
        failed_when: rails_app_rc_check != "1"
        changed_when: false
      #
      #
      #
      #
      # - name: check project 'my-shared-storage' exists
      #
      #
      # - name: check health of file-uploader deployment
      #
      #
      # - name: check route of file-uploader sevice
      #
      #
      # - name: check replica level of file-uploader deployment
      #
      #
      # - name: ensure rwx pvc exists
      #
      #
      # - name: ensure pvc is part of file-uploader deployment
      #
      #
      # - name: ensure additional CNS nodes are configured in the inventory
      #
      #
      # - name: ensure firewall rules are present on CNS nodes
      #
      #
      # - name: ensure additional storage nodes have correct label
      #
      #
      # - name: check daemonset is scaled
      #
      #
      # - name: check daemonset health
      #
      #
      # - name: get second cluster id from heketi
      #
      #
      # - name: check second cluster nodes
      #
      #
      # - name: check storage class configuration
      #
      #
      # - name: check presence of additional devices in nodes
      #
      #
      # - name: check failed device has been removed
      #
      #
      # - name: check registry pvc from CNS
      #
      #
      # - name: ensure registry runs on pvc

...
